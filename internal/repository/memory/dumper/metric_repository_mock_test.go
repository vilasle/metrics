// Code generated by MockGen. DO NOT EDIT.
// Source: ../../repository.go

// Package dumper is a generated GoMock package.
package dumper

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "github.com/vilasle/metrics/internal/metric"
)

// MockMetricRepository is a mock of MetricRepository interface.
type MockMetricRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRepositoryMockRecorder
}

// MockMetricRepositoryMockRecorder is the mock recorder for MockMetricRepository.
type MockMetricRepositoryMockRecorder struct {
	mock *MockMetricRepository
}

// NewMockMetricRepository creates a new mock instance.
func NewMockMetricRepository(ctrl *gomock.Controller) *MockMetricRepository {
	mock := &MockMetricRepository{ctrl: ctrl}
	mock.recorder = &MockMetricRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricRepository) EXPECT() *MockMetricRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetricRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMetricRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricRepository)(nil).Close))
}

// Get mocks base method.
func (m *MockMetricRepository) Get(ctx context.Context, metricType string, filterName ...string) ([]metric.Metric, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, metricType}
	for _, a := range filterName {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].([]metric.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricRepositoryMockRecorder) Get(ctx, metricType interface{}, filterName ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, metricType}, filterName...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricRepository)(nil).Get), varargs...)
}

// Ping mocks base method.
func (m *MockMetricRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricRepository)(nil).Ping), ctx)
}

// Save mocks base method.
func (m *MockMetricRepository) Save(arg0 context.Context, arg1 ...metric.Metric) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricRepositoryMockRecorder) Save(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricRepository)(nil).Save), varargs...)
}
