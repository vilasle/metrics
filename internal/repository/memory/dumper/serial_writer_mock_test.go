// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package dumper is a generated GoMock package.
package dumper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSerialWriter is a mock of SerialWriter interface.
type MockSerialWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSerialWriterMockRecorder
}

// MockSerialWriterMockRecorder is the mock recorder for MockSerialWriter.
type MockSerialWriterMockRecorder struct {
	mock *MockSerialWriter
}

// NewMockSerialWriter creates a new mock instance.
func NewMockSerialWriter(ctrl *gomock.Controller) *MockSerialWriter {
	mock := &MockSerialWriter{ctrl: ctrl}
	mock.recorder = &MockSerialWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerialWriter) EXPECT() *MockSerialWriterMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockSerialWriter) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockSerialWriterMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSerialWriter)(nil).Clear))
}

// Close mocks base method.
func (m *MockSerialWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSerialWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSerialWriter)(nil).Close))
}

// Rewrite mocks base method.
func (m *MockSerialWriter) Rewrite(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rewrite", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rewrite indicates an expected call of Rewrite.
func (mr *MockSerialWriterMockRecorder) Rewrite(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewrite", reflect.TypeOf((*MockSerialWriter)(nil).Rewrite), b)
}

// ScanAll mocks base method.
func (m *MockSerialWriter) ScanAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanAll indicates an expected call of ScanAll.
func (mr *MockSerialWriterMockRecorder) ScanAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanAll", reflect.TypeOf((*MockSerialWriter)(nil).ScanAll))
}

// Write mocks base method.
func (m *MockSerialWriter) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSerialWriterMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSerialWriter)(nil).Write), b)
}
